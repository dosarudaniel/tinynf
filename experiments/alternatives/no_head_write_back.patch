--- net/82599/ixgbe.c
+++ net/82599/ixgbe.c
@@ -163,10 +163,6 @@
 // This bit is reserved, has no name, but must be used anyway
 #define REG_DCARXCTRL_UNKNOWN BIT(12)
 
-// Section 8.2.3.11.2 Tx DCA Control Registers
-#define REG_DCATXCTRL(n) (0x0600Cu + 0x40u*(n))
-#define REG_DCATXCTRL_TX_DESC_WB_RO_EN BIT(11)
-
 // Section 8.2.3.9.2 DMA Tx Control
 #define REG_DMATXCTL 0x04A80u
 #define REG_DMATXCTL_TE BIT(0)
@@ -302,12 +298,6 @@
 // Section 8.2.3.9.9 Transmit Descriptor Tail
 #define REG_TDT(n) (0x06018u + 0x40u*(n))
 
-// Section 8.2.3.9.11 Tx Descriptor Completion Write Back Address High
-#define REG_TDWBAH(n) (0x0603Cu + 0x40u*(n))
-
-// Section 8.2.3.9.11 Tx Descriptor Completion Write Back Address Low
-#define REG_TDWBAL(n) (0x06038u + 0x40u*(n))
-
 // Section 8.2.3.9.10 Transmit Descriptor Control
 #define REG_TXDCTL(n) (0x06028u + 0x40u*(n))
 #define REG_TXDCTL_PTHRESH BITS(0,6)
@@ -357,9 +347,9 @@
 static_assert(IXGBE_AGENT_FLUSH_PERIOD < IXGBE_RING_SIZE, "Flush period must be less than the ring size");
 
 // Updating period for receiving transmit head updates from the hardware and writing new values of the receive tail based on it.
-#define IXGBE_AGENT_RECYCLE_PERIOD 64
+#define IXGBE_AGENT_RECYCLE_PERIOD 32
 static_assert(IXGBE_AGENT_RECYCLE_PERIOD >= 1, "Recycle period must be at least 1");
-static_assert(IXGBE_AGENT_RECYCLE_PERIOD < IXGBE_RING_SIZE, "Recycle period must be less than the ring size");
+static_assert(IXGBE_AGENT_RECYCLE_PERIOD <= 40, "Recycle period must be 40 or less due to the NIC's on-die descriptor queue size");
 static_assert((IXGBE_AGENT_RECYCLE_PERIOD & (IXGBE_AGENT_RECYCLE_PERIOD - 1)) == 0, "Recycle period must be a power of 2 for fast modulo");
 
 
@@ -1002,15 +992,10 @@
 	uint8_t* buffer;
 	volatile uint32_t* receive_tail_addr;
 	uint64_t processed_delimiter;
+	uint64_t recycled_delimiter;
 	uint64_t outputs_count;
 	uint64_t flush_counter;
-	uint8_t _padding[3*8];
-	// transmit heads must be 16-byte aligned; see alignment remarks in transmit queue setup
-	// (there is also a runtime check to make sure the array itself is aligned properly)
-	// plus, we want each head on its own cache line to avoid conflicts
-	// thus, using assumption CACHE, we multiply indices by 16
-	#define TRANSMIT_HEAD_MULTIPLIER 16
-	volatile uint32_t transmit_heads[IXGBE_AGENT_OUTPUTS_MAX * TRANSMIT_HEAD_MULTIPLIER];
+	uint8_t _padding[2*8];
 	volatile uint64_t* rings[IXGBE_AGENT_OUTPUTS_MAX]; // 0 == shared receive/transmit, rest are exclusive transmit
 	volatile uint32_t* transmit_tail_addrs[IXGBE_AGENT_OUTPUTS_MAX];
 };
@@ -1045,6 +1030,8 @@
 		}
 	}
 
+	agent->recycled_delimiter = IXGBE_AGENT_RECYCLE_PERIOD - 1;
+
 	*out_agent = agent;
 	return true;
 }
@@ -1216,31 +1203,6 @@
 	// PERFORMANCE: This is required to forward 10G traffic on a single NIC.
 	reg_write_field(device->addr, REG_TXDCTL(queue_index), REG_TXDCTL_PTHRESH, 60);
 	reg_write_field(device->addr, REG_TXDCTL(queue_index), REG_TXDCTL_HTHRESH, 4);
-	// "- If needed, set TDWBAL/TWDBAH to enable head write back."
-	uintptr_t head_phys_addr;
-	if (!tn_mem_virt_to_phys((void*) &(agent->transmit_heads[agent->outputs_count * TRANSMIT_HEAD_MULTIPLIER]), &head_phys_addr)) {
-		TN_DEBUG("Could not get the physical address of the transmit head");
-		return false;
-	}
-	//	Section 7.2.3.5.2 Tx Head Pointer Write Back:
-	//	"The low register's LSB hold the control bits.
-	// 	 * The Head_WB_EN bit enables activation of tail write back. In this case, no descriptor write back is executed.
-	// 	 * The 30 upper bits of this register hold the lowest 32 bits of the head write-back address, assuming that the two last bits are zero."
-	//	"software should [...] make sure the TDBAL value is Dword-aligned."
-	//	Section 8.2.3.9.11 Tx Descriptor completion Write Back Address Low (TDWBAL[n]): "the actual address is Qword aligned"
-	// INTERPRETATION-CONTRADICTION: There is an obvious contradiction here; qword-aligned seems like a safe option since it will also be dword-aligned.
-	// INTERPRETATION-INCORRECT: Empirically, the answer is... 16 bytes. Write-back has no effect otherwise. So both versions are wrong.
-	if (head_phys_addr % 16u != 0) {
-		TN_DEBUG("Transmit head's physical address is not aligned properly");
-		return false;
-	}
-	//	Section 8.2.3.9.11 Tx Descriptor Completion Write Back Address Low (TDWBAL[n]):
-	//	"Head_WB_En, bit 0 [...] 1b = Head write-back is enabled."
-	//	"Reserved, bit 1"
-	reg_write(device->addr, REG_TDWBAH(queue_index), (uint32_t) (head_phys_addr >> 32));
-	reg_write(device->addr, REG_TDWBAL(queue_index), (uint32_t) head_phys_addr | 1u);
-	// INTERPRETATION-MISSING: We must disable relaxed ordering of head pointer write-back, since it could cause the head pointer to be updated backwards
-	reg_clear_field(device->addr, REG_DCATXCTRL(queue_index), REG_DCATXCTRL_TX_DESC_WB_RO_EN);
 	// "- Enable transmit path by setting DMATXCTL.TE.
 	//    This step should be executed only for the first enabled transmit queue and does not need to be repeated for any following queues."
 	if (!device->tx_enabled) {
@@ -1363,20 +1325,14 @@
 	// Recycle transmitted descriptors back to receiving
 	// This should happen as rarely as asking the NIC for transmit head updates, thus we reuse rs_bit
 	if (rs_bit != 0) {
-		uint32_t earliest_transmit_head = (uint32_t) agent->processed_delimiter;
-		uint64_t min_diff = (uint64_t) -1;
-		// There is an implicit race condition with the hardware: a transmit head could be updated just after we've read it
-		// but before we write to the receive tail. This is fine; it just means our "earliest transmit head" is not as high as it could be.
 		for (uint64_t n = 0; n < agent->outputs_count; n++) {
-			uint32_t head = tn_le_to_cpu32(agent->transmit_heads[n * TRANSMIT_HEAD_MULTIPLIER]);
-			uint64_t diff = head - agent->processed_delimiter;
-			if (diff <= min_diff) {
-				earliest_transmit_head = head;
-				min_diff = diff;
+			uint64_t transmit_metadata = agent->rings[n][2u*agent->recycled_delimiter + 1];
+			if ((transmit_metadata & BITL(32)) == 0) {
+				return;
 			}
 		}
-
-		reg_write_raw(agent->receive_tail_addr, (earliest_transmit_head - 1) & (IXGBE_RING_SIZE - 1));
+		reg_write_raw(agent->receive_tail_addr, (uint32_t) agent->recycled_delimiter);
+		agent->recycled_delimiter = (agent->recycled_delimiter + IXGBE_AGENT_RECYCLE_PERIOD) & (IXGBE_RING_SIZE - 1);
 	}
 }
 
