--- net/82599/ixgbe.c
+++ net/82599/ixgbe.c
@@ -284,6 +284,7 @@
 // Section 8.2.3.8.7 Split Receive Control Registers
 #define REG_SRRCTL(n) ((n) <= 63u ? (0x01014u + 0x40u*(n)) : (0x0D014u + 0x40u*((n)-64u)))
 #define REG_SRRCTL_BSIZEPACKET BITS(0,4)
+#define REG_SRRCTL_DESCTYPE BITS(25,27)
 #define REG_SRRCTL_DROP_EN BIT(28)
 
 // Section 8.2.3.1.2 Device Status Register
@@ -1004,7 +1005,8 @@
 	uint64_t processed_delimiter;
 	uint64_t outputs_count;
 	uint64_t flush_counter;
-	uint8_t _padding[3*8];
+	uintptr_t buffer_phys_addr;
+	uint8_t _padding[2*8];
 	// transmit heads must be 16-byte aligned; see alignment remarks in transmit queue setup
 	// (there is also a runtime check to make sure the array itself is aligned properly)
 	// plus, we want each head on its own cache line to avoid conflicts
@@ -1033,6 +1035,13 @@
 		return false;
 	}
 
+	if (!tn_mem_virt_to_phys(agent->buffer, &(agent->buffer_phys_addr))) {
+		TN_DEBUG("Could not get the agent buffer's physical address");
+		tn_mem_free(agent->buffer);
+		tn_mem_free(agent);
+		return false;
+	}
+
 	for (uint64_t n = 0; n < IXGBE_AGENT_OUTPUTS_MAX; n++) {
 		if (!tn_mem_allocate(IXGBE_RING_SIZE * 16, (void**) &(agent->rings[n]))) { // 16 bytes per descriptor, i.e. 2x64bits
 			TN_DEBUG("Could not allocate ring");
@@ -1101,6 +1110,8 @@
 	//		"Drop_En, Drop Enabled. If set to 1b, packets received to the queue when no descriptors are available to store them are dropped."
 	// Enable this because of assumption DROP
 	reg_set_field(device->addr, REG_SRRCTL(queue_index), REG_SRRCTL_DROP_EN);
+	// Use advanced receive descriptors
+	reg_write_field(device->addr, REG_SRRCTL(queue_index), REG_SRRCTL_DESCTYPE, 1);
 	// "- If header split is required for this queue, program the appropriate PSRTYPE for the appropriate headers."
 	// Section 7.1.10 Header Splitting: "Header Splitting mode might cause unpredictable behavior and should not be used with the 82599."
 	// "- Program RSC mode for the queue via the RSCCTL register."
@@ -1281,9 +1292,9 @@
 
 	// Since descriptors are 16 bytes, the index must be doubled
 	uint64_t receive_metadata = tn_le_to_cpu64(agent->rings[0][2u*agent->processed_delimiter + 1]);
-	// Section 7.1.5 Legacy Receive Descriptor Format:
-	// "Status Field (8-bit offset 32, 2nd line)": Bit 0 = DD, "Descriptor Done."
-	if ((receive_metadata & BITL(32)) == 0) {
+	// Section 7.1.6.2 Advanced Receive Descriptors - Write-Back Format:
+	// "Extended Status / NEXTP (20-bit offset 0, 2nd line)": Bit 0 = DD, "Descriptor Done."
+	if ((receive_metadata & BITL(0)) == 0) {
 		// No packet; flush if we need to.
 		// This is technically a part of transmission, but we must eventually flush after processing a packet even if no more packets are received
 		if (agent->flush_counter != 0) {
@@ -1296,10 +1307,13 @@
 		return false;
 	}
 
+	// The first line gets clobbered by write-back, so we must write the (physical!) address agin.
+	agent->rings[0][2u*agent->processed_delimiter] = tn_cpu_to_le64(agent->buffer_phys_addr + (PACKET_BUFFER_SIZE * agent->processed_delimiter));
+
 	// This cannot overflow because the packet is by definition in an allocated block of memory
 	*out_packet = agent->buffer + (PACKET_BUFFER_SIZE * agent->processed_delimiter);
-	// "Length Field (16-bit offset 0, 2nd line): The length indicated in this field covers the data written to a receive buffer."
-	*out_packet_length = tn_le_to_cpu64(receive_metadata) & 0xFFFFu;
+	// "PKT_LEN (16-bit offset 32, 2nd line): "PKT_LEN holds the number of bytes posted to the packet buffer."
+	*out_packet_length = (tn_le_to_cpu64(receive_metadata) >> 32) & 0xFFFFu;
 
 	return true;
 }
@@ -1313,39 +1327,46 @@
 	// INTERPRETATION-MISSING: The data sheet does not specify the endianness of transmit descriptor metadata fields, nor of the written-back head pointer.
 	// Since Section 1.5.3 Byte Ordering states "Registers not transferred on the wire are defined in little endian notation.", we will assume they are little-endian.
 
-	// Section 7.2.3.2.2 Legacy Transmit Descriptor Format:
-	// "Buffer Address (64)", 1st line
+	// Section 7.2.3.2.4 Advanced Transmit Data Descriptor:
+	// "Address (64)", 1st line
 	// 2nd line:
-		// "Length", bits 0-15: "Length (TDESC.LENGTH) specifies the length in bytes to be fetched from the buffer address provided"
-			// "Note: Descriptors with zero length (null descriptors) transfer no data."
-		// "CSO", bits 16-23: "A Checksum Offset (TDESC.CSO) field indicates where, relative to the start of the packet, to insert a TCP checksum if this mode is enabled"
+		// "DTALEN", bits 0-15: "length in bytes of data buffer at the address pointed to by this specific descriptor"
+			// "Note: Descriptors with zero length, transfer no data."
+		// "RSV", bits 16-17: "Reserved."
+			// All zero
+		// "MAC", bits 18-19: "ILSec (bit 0) - Apply LinkSec on packet. 1588 (bit 1) - IEEE1588 time stamp packet."
 			// All zero
-		// "CMD", bits 24-31:
-			// "RSV (bit 7) - Reserved"
+		// "DTYP", bits 20-23: "0011b for advanced data descriptor."
+		// "DCMD", bits 24-31:
+			// "TSE (bit 7) - Transmit Segmentation Enable"
 			// "VLE (bit 6) - VLAN Packet Enable"
-			// "DEXT (bit 5) - Descriptor extension (zero for legacy mode)"
+			// "DEXT (bit 5) - This bit must be one to indicate advanced descriptor format (as opposed to legacy)."
 			// "RSV (bit 4) - Reserved"
 			// "RS (bit 3) - Report Status - RS signals hardware to report the DMA completion status indication [...]"
-			// "IC (bit 2) - Insert Checksum - Hardware inserts a checksum at the offset indicated by the CSO field if the Insert Checksum bit (IC) is set."
+			// "RSV (bit 2) - Reserved"
 			// "IFCS (bit 1) - Insert FCS":
 			//	"There are several cases in which software must set IFCS as follows: Transmitting a short packet while padding is enabled by the HLREG0.TXPADEN bit. [...]"
 			//      By assumption TXPAD we need this bit set.
 			// "EOP (bit 0) - End of Packet"
-		// "STA", bits 32-35: "DD (bit 0) - Descriptor Done. The other bits in the STA field are reserved."
-			// All zero
-		// "Rsvd", bits 36-39: "Reserved."
+		// "STA", bits 32-35: "Rsv (bit 3:1) - Reserved. DD (bit 0) - Descriptor Done."
+		// "IDX", bits 36-38: "[...] If no offload is required and the CC bit is cleared, this field is not relevant"
 			// All zero
-		// "CSS", bits 40-47: "A Checksum Start (TDESC.CSS) field indicates where to begin computing the checksum."
+		// "CC", bit 39: "When set, a Tx context descriptor indicated by IDX index should be used for this packet(s)."
+			// Zero
+		// "POPTS", bits 40-45: "Rsv (bits 5:3) - Reserved. IPSEC (bit 2) - Ipsec offload request. TXSM (bit 1) - Insert TCP/UDP Checksum. IXSM (bit 0) - Insert IP Checksum."
 			// All zero
-		// "VLAN", bits 48-63: "The VLAN field is used to provide the 802.1q/802.1ac tagging information."
+		// "PAYLEN", bits 46-63: "[...] In a single-send packet, PAYLEN defines the entire packet size fetched from host memory."
 			// All zero
 	// INTERPRETATION-INCORRECT: Despite being marked as "reserved", the buffer address does not get clobbered by write-back, so no need to set it again.
-	// This means all we have to do is set the length in the first 16 bits, then bits 0,1 of CMD, and bit 3 of CMD if we want write-back.
-	// Importantly, since bit 32 will stay at 0, and we share the receive ring and the first transmit ring, it will clear the Descriptor Done flag of the receive descriptor.
+	// This means all we have to do is set two lengths to the same value, bits 0,1,5 of DCMD, bits 0,1 of DTYP, and bit 3 of DCMD if we want write-back.
 	// Not setting the RS bit every time is a huge perf win in throughput (a few Gb/s) with no apparent impact on latency.
 	uint64_t rs_bit = (uint64_t) ((agent->processed_delimiter & (IXGBE_AGENT_RECYCLE_PERIOD - 1)) == (IXGBE_AGENT_RECYCLE_PERIOD - 1)) << (24+3);
 	for (uint64_t n = 0; n < agent->outputs_count; n++) {
-		agent->rings[n][2u*agent->processed_delimiter + 1] = tn_cpu_to_le64((outputs[n] * (uint64_t) packet_length) | rs_bit | BITL(24+1) | BITL(24));
+		agent->rings[n][2u*agent->processed_delimiter + 1] = tn_cpu_to_le64(
+			(outputs[n] * (uint64_t) packet_length) |
+			rs_bit | BITL(20) | BITL(20+1) | BITL(24) | BITL(24+1) | BITL(24+5) |
+			((outputs[n] * (uint64_t) packet_length) << 46)
+		);
 	}
 
 	// Increment the processed delimiter, modulo the ring size
